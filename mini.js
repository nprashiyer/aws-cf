require("dotenv").config();const express=require("express"),bodyParser=require("body-parser"),ejs=require("ejs"),mongoose=require("mongoose"),session=require("express-session"),passport=require("passport"),request=require("request"),passportLocalMongoose=require("passport-local-mongoose"),app=express();app.use(express.static(__dirname+"/public")),app.set("view engine","ejs"),app.use(bodyParser.urlencoded({extended:!0})),app.use(session({secret:process.env.SECRET,resave:!1,saveUninitialized:!1})),app.use(passport.initialize()),app.use(passport.session()),mongoose.connect(process.env.MONGODBCONNECTION,{useNewUrlParser:!0,useUnifiedTopology:!0}),mongoose.set("useCreateIndex",!0);const userSchema=new mongoose.Schema({username:String,password:String});userSchema.plugin(passportLocalMongoose);const orderSchema=new mongoose.Schema({platform:String,name:String,location:String,os:String}),Order=new mongoose.model("Order",orderSchema,"orders"),User=new mongoose.model("User",userSchema,"users");passport.use(User.createStrategy()),passport.serializeUser(User.serializeUser()),passport.deserializeUser(User.deserializeUser()),app.get("/",function(e,s){s.sendFile(__dirname+"/index.html")}),app.post("/login",function(e,s){const o=new User({username:e.body.username,password:e.body.password});e.login(o,function(o){o?(console.log("Not authroized"),console.log(o)):passport.authenticate("local")(e,s,function(){s.redirect("/home")})})}),app.get("/home",function(e,s){e.isAuthenticated()?s.render("home"):s.redirect("/")}),app.get("/userguide",function(e,s){e.isAuthenticated()?s.render("userguide"):s.redirect("/")}),app.get("/myservers",function(e,s){e.isAuthenticated()?Order.find({},function(e,o){e?console.log(e):o&&s.render("myservers",{orderList:o})}):s.redirect("/")}),app.get("/logout",function(e,s){e.logout(),s.redirect("/")}),app.post("/",function(e,s){const o=e.body.vmname.toLowerCase(),r=e.body.platform,n=e.body.vmlocation,t=e.body.vmos,i=e.body.usage+e.body.vmsize,a=process.env.TOWER_USER,p=process.env.TOWER_PASS;var c={extra_vars:'{"name": "'+o+'","region": "'+n+'", "os": "'+t+'","size": "'+i+'" }'},u=JSON.stringify(c);if("AWS"==r)var d="http://"+a+":"+p+process.env.TOWER+"15/launch/";else if("Azure"==r)d="http://"+a+":"+p+process.env.TOWER+"16/launch/";else if("GCP"==r)d="http://"+a+":"+p+process.env.TOWER+"17/launch/";else console.log("Error");request.post({headers:{"Content-Type":"application/json"},url:d,body:u},function(e,s,o){console.log(o)}),s.render("submit",{vmname:o}),new Order({platform:r,name:o,location:n.toUpperCase(),os:t.toUpperCase()}).save(function(e){e?console.log(e):s.render("/submit")})}),app.post("/del",function(e,s){const o=e.body.servername;Order.findOne({name:o},function(e,o){e?console.log(e):o.remove(),s.redirect("/myservers")})}),app.listen(process.env.PORT||3e3,function(){console.log("Server started on port 3000.")});
